datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["dataProxy"]
}

generator giraphql {
  provider = "prisma-giraphql-types"
}

model CommentThread {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  comments  Comment[]
}

model Comment {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  thread    CommentThread @relation(fields: [threadId], references: [id])
  threadId  String
  name      String
  comment   String
  type      String        @default("text")
}

model DumbPiCommand {
  id         String      @id @default(uuid())
  createdAt  DateTime    @unique @default(now())
  command    String
  type       String
  drinkOrder DrinkOrder?
}

model DrinkIngredient {
  id         String      @id @default(uuid())
  createdAt  DateTime    @unique @default(now())
  name       String
  pumps      DrinkPump[]
  max        Int         @default(0)
  multiplier Int         @default(1)
  increment  Int         @default(1)
  unit       String      @default("ms")
  default    Int         @default(0)
}

model DrinkOrder {
  id        String        @id @default(uuid())
  createdAt DateTime      @unique @default(now())
  name      String
  command   DumbPiCommand @relation(fields: [commandId], references: [id], onDelete: Cascade)
  commandId String        @unique
}

model DrinkPump {
  id           String           @id @default(uuid())
  pin          Int
  enabled      Boolean          @default(true)
  ingredient   DrinkIngredient? @relation(fields: [ingredientId], references: [id])
  ingredientId String
}

model ViewCount {
  id    String @id @default(uuid())
  name  String @unique
  count Int    @default(0)
}
